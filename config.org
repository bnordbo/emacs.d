* Basic initialisation
** Configure package installation

Automatically ensure packages are installed if they are not already
there.

#+begin_src emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+end_src

Ensure packages are always compiled, and that the latest version
available is used.

#+begin_src emacs-lisp
(use-package auto-compile
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+end_src

Who wouldn't want sensible defaults?

#+begin_src emacs-lisp
(load-file "~/.emacs.d/sensible-defaults.el")
(sensible-defaults/use-all-settings)
#+end_src

** Integrations

Start emacs-server for integrating neatly with the shell.

#+begin_src emacs-lisp
(use-package server)
(if (not (server-running-p))
  (server-start))
#+end_src

** TODO Move elisp functions to a separate file                       :emacs:
* Experiments

This section is for testing out new configurations.

#+begin_src emacs-lisp
(global-hl-line-mode 1)
#+end_src

* Extra functions

Open a new line below the current one and indent.  I missed this
function for ten years.  It took me two minutes to whip together this
one.

#+begin_src emacs-lisp
(defun bn-next-line-and-indent ()
  (interactive)
  (end-of-line)
  (default-indent-new-line))
(global-set-key (kbd "C-<return>") 'bn-next-line-and-indent)
#+end_src

Support for adding/removing org-roam tags, borrowed from [[https://gist.github.com/d12frosted/4a55f3d072a813159c1d7b31c21bac9a#file-org-roam-tags-el-L21][d12frosted]].
I find it very odd that this is not already part of org-roam...

#+begin_src emacs-lisp
(defun +org-notes-tags-read ()
  "Return list of tags as set in the buffer."
  (org-roam--extract-tags-prop (buffer-file-name (buffer-base-buffer))))

(defun +org-notes-tags-delete ()
  "Delete a tag from current note."
  (interactive)
  (unless (+org-notes-buffer-p)
    (user-error "Current buffer is not a note"))
  (let* ((tags (+org-notes-tags-read))
         (tag (completing-read "Tag: " tags nil 'require-match)))
    (+org-buffer-prop-set
     "ROAM_TAGS"
     (combine-and-quote-strings (delete tag tags)))
    (org-roam-db--update-tags)))

(defun +org-notes-tags-add ()
  "Add a tag to current note."
  (interactive)
  (unless (+org-notes-buffer-p)
    (user-error "Current buffer is not a note"))
  (let* ((tags (seq-uniq
                (+seq-flatten
                 (+seq-flatten
                  (org-roam-db-query [:select tags :from tags])))))
         (tag (completing-read "Tag: " tags)))
    (when (string-empty-p tag)
      (user-error "Tag can't be empty"))
    (+org-buffer-prop-set
     "roam_tags"
     (combine-and-quote-strings (seq-uniq (cons tag (+org-notes-tags-read)))))
    (org-roam-db--update-tags)))

(defun +org-notes-buffer-p ()
  "Return non-nil if the currently visited buffer is a note."
  (and buffer-file-name
       (string-equal (expand-file-name (file-name-as-directory org-roam-directory))
                     (file-name-directory buffer-file-name))))

(defun +seq-flatten (list-of-lists)
  "Flatten LIST-OF-LISTS."
  (apply #'append list-of-lists))

(defun +org-buffer-prop-set (name value)
  "Set a buffer property called NAME to VALUE."
  (save-excursion
    (widen)
    (goto-char (point-min))
    (if (re-search-forward (concat "^#\\+" name ": \\(.*\\)") (point-max) t)
        (replace-match (concat "#+" name ": " value))
      ;; find the first line that doesn't begin with ':' or '#'
      (let ((found))
        (while (not (or found (eobp)))
          (beginning-of-line)
          (if (or (looking-at "^#")
                  (looking-at "^:"))
              (line-move 1 t)
            (setq found t)))
        (insert "#+" name ": " value "\n")))))
#+end_src

* Look and feel

** TODO Look into [[https://github.com/kunalb/poet][poet theme]]                                          :emacs:

While I find dark themes more aesthetically pleasing, bright ones are
more ergonomic.

#+begin_src emacs-lisp
(use-package leuven-theme)
#+end_src

Conserve space and reduce clutter.

#+begin_src emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

I don't think I've ever had any  use of seeing the minor modes in the mode line.
This saves a lot of space that I can surely find some other use  for.

#+begin_src emacs-lisp
(use-package minions
  :config
  (setq minions-mode-line-lighter ""
        minions-mode-line-delimiters '("" . ""))
  (minions-mode 1))
#+end_src

Run in full screen mode.  On Mac this no longer creates a new desktop,
but rather an undecorated, maximised frame.  It's a bit funky, but I
have not had time to look into it yet.

#+begin_src emacs-lisp
(toggle-frame-fullscreen)
#+end_src

I find transparency neat for about ten minutes...

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(alpha . (100 . 100)))
#+end_src

Incosolata LGC Markup as it has more glyphs (like em dash) than InconsolataGo.
Libre Baskerville is as nice as Baskerville, and easier to read on the screen.

#+begin_src emacs-lisp
(custom-theme-set-faces
 'user
 '(variable-pitch ((t (:family "Libre Baskerville" :height 130))))
 '(fixed-pitch ((t (:family "Inconsolata LGC Markup" :height 130)))))
#+end_src

Why not?

#+begin_src emacs-lisp
(global-prettify-symbols-mode t)
#+end_src

Define modes and related hooks used for writing prose.

#+begin_src emacs-lisp
(defvar prose-modes '(text-mode git-commit-mode markdown-mode))
(defvar prose-mode-hooks
  (mapcar (lambda (n) (intern (format "%s-hook" n)))
          prose-modes))
#+end_src

Set up prose modes with a variable pitch font.  I'm still not sure about this,
but variable pitch fonts /are/ easier to read.

** DONE Make code blocks in org-mode monospace                        :emacs:
   CLOSED: [2020-10-01 Thu 17:38]
   :LOGBOOK:
   CLOCK: [2020-10-01 Thu 17:20]
   :END:

#+begin_src emacs-lisp
(dolist (h prose-mode-hooks)
  (add-hook h (lambda () (variable-pitch-mode 1))))
#+end_src

Tables and blocks should still be in monospace.

#+begin_src emacs-lisp
(set-face-attribute 'org-block  nil :inherit 'fixed-pitch)
(set-face-attribute 'org-table nil :inherit 'fixed-pitch)
#+end_src

Prevent horizontal splits for big windows.

#+begin_src emacs-lisp
(setq split-height-threshold nil)
#+end_src

Zoom mode allows me to continue using a three-way split when I
disconnect the monitor.  It mostly works great.

#+begin_src emacs-lisp
(zoom-mode 1)
(setq zoom-size '(100 .  40))
#+end_src

No ugly line wrapping.

#+begin_src emacs-lisp
(set-default 'truncate-lines t)
#+end_src

I've never missed the bell, visible or otherwise.

#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

Auto-highlighting the current symbol can be quite useful, not only
when programming.

#+begin_src emacs-lisp
(setq ahs-idle-interval 1.0
      ahs-default-range 'ahs-range-whole-buffer
      ahs-inhibit-face-list '(font-lock-comment-delimiter-face
                              font-lock-comment-face
                              font-lock-doc-face
                              font-lock-doc-string-face
                              font-lock-string-face))
#+end_src

* General editing setup

As a rule, I don't want to indent with tabs.  Spaces are more
predicable, and I anyway leave it to Emacs most of the time.

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

This eliminates all the tilde suffixed files.  I've got TimeMachine
for backups.

#+begin_src emacs-lisp
(setq backup-inhibited t)
#+end_src

Unconditionally auto-save all visited files every time Emacs loses focus.

#+begin_src emacs-lisp
(add-hook 'focus-out-hook
          (lambda ()
            (interactive)
            (save-some-buffers t)))
#+end_src

Automatically saving files is useful, but this had some side effects I can't
quite recall. Experiment more.

#+begin_src emacs-lisp
;(auto-save-visited-mode t)
;(setq auto-save-visited-interval 45)
#+end_src

Some like having the lines numbered, but I find just showing it in the
modeline will usually suffice.

#+begin_src emacs-lisp
(column-number-mode t)
#+end_src

Improve parenthesis handling by highlighting matching ones.

#+begin_src emacs-lisp
(show-paren-mode t)
#+end_src

Try to keep the whitespace under control.  The whitespace butler seems
to work pretty well.

#+begin_src emacs-lisp
(add-hook 'find-file-hook #'ws-butler-global-mode)
(setq require-final-newline t)
#+end_src

Make regular expession alignment always use spaces and not tabs.

#+begin_src emacs-lisp
(defadvice align-regexp (around align-regexp-with-spaces activate)
  (let ((indent-tabs-mode nil))
    ad-do-it))
#+end_src

Getting the environment set correctly is/was a struggle on macOS.
I've been using this for a while, and it seems to work.

#+begin_src emacs-lisp
(exec-path-from-shell-initialize)
#+end_src

I just use ispell for now, but should look into a way of supporting
multiple dictionaries.

#+begin_src emacs-lisp
(setq ispell-program-name "/usr/local/bin/ispell")
#+end_src

** TODO Auto-save strips whitespace from current line                 :emacs:
   - Note taken on [2020-10-01 Thu 19:21] \\
     When exiting Emacs triggers an auto-save, any trailing whitespace from the
     current line is stripped. This is annoying â€“ whitespace should never be stripped
     from the line where the cursor is.
* Programming language support

** Go

This sets up Go mode with some basic support.  The jump to definition
support is extremely limited, unfortunately.

#+begin_src emacs-lisp
(use-package go-mode
  :bind (("M-." . godef-jump))
  :hook (before-save . gofmt-before-save)
  :init
  (exec-path-from-shell-copy-env "GOPATH")
  (setq tab-width 4
        go-eldoc-gocode "/Users/bn/go/bin/gocode")
  :config
  (auto-highlight-symbol-mode 1)
  (electric-pair-local-mode 1)
  (subword-mode 1)
  (yas-minor-mode 1))
(use-package go-eldoc
  :config
  (go-eldoc-setup))
(use-package go-add-tags)
(use-package go-fill-struct)
(use-package go-playground)
#+end_src

** TODO Add customisation for elisp-mode                              :emacs:
*** DONE paredit-mode
    CLOSED: [2020-10-01 Thu 20:57]
*** TODO rainbow-delimiters
*** DONE eldoc-mode
    CLOSED: [2020-10-01 Thu 20:57]
    :LOGBOOK:
    CLOCK: [2020-10-01 Thu 19:52]--[2020-10-01 Thu 20:57] =>  1:05
    :END:

** Elisp

#+begin_src emacs-lisp
(use-package paredit
  :hook emacs-lisp-mode-hook)

(use-package rainbow-delimiters
  :hook emacs-lisp-mode-hook)

(use-package eldoc
  :hook emacs-lisp-mode-hook
  :config
  (eldoc-add-command
     'paredit-backward-delete
     'paredit-close-round))

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)))
#+end_src

** Haskell

#+begin_src emacs-lisp
(use-package haskell-mode)

(add-hook 'haskell-mode-hook
          (lambda ()
            (subword-mode 1)
            (electric-pair-local-mode 1)
            (haskell-doc-mode 1)))
#+end_src

** Rust

#+begin_src emacs-lisp
(use-package rust-mode)

(setq racer-cmd "~/bin/racer"
      racer-rust-src-path "~/src/thirdparty/rust/src"
      company-tooltip-align-annotations t)

(add-hook 'rust-mode-hook
          (lambda ()
            (cargo-minor-mode 1)
            (electric-pair-local-mode 1)
            (racer-mode 1)))

(add-hook 'racer-mode-hook
          (lambda ()
            (eldoc-mode 1)
            (company-mode 1)))
#+end_src

** Markdown

#+begin_src emacs-lisp
(setq markdown-open-command "~/bin/mark")

(add-hook 'markdown-mode-hook
          (lambda ()
            (visual-line-mode 1)))
#+end_src

** Bazel

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("BUILD\\'" . bazel-mode))
#+end_src

* Helm

#+begin_src emacs-lisp
(require 'helm-config)

(helm-mode t)

(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x r b") 'helm-filtered-bookmarks)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-x 4 f") 'find-file-other-window)
#+end_src

* General key bindings

On Mac, map the command key to meta and keep the normal behaviour of
option.

#+begin_src emacs-lisp
(setq mac-command-modifier 'meta
      mac-option-modifier nil)
#+end_src

I picked up C-TAB switcing from Eclipse way back.  The reverse one is
perhaps overdoing it since I usually have no more than three buffers.

#+begin_src emacs-lisp
(defun other-window-back ()
  (interactive)
  (other-window -1))

(global-set-key (kbd "C-<tab>")   'other-window)
(global-set-key (kbd "C-S-<tab>") 'other-window-back)
#+end_src

Bind a few useful functions.

#+begin_src emacs-lisp
(global-set-key (kbd "C-x \\")	    'align-regexp)
(global-set-key (kbd "C-x C-<SPC>") 'just-one-space)
#+end_src

Some stuff I missed after making an attempt at TextMate a while back.

#+begin_src emacs-lisp
(global-move-dup-mode t)
(global-set-key (kbd "C-x C-d") 'md-duplicate-down)
(global-unset-key (kbd "C-M-<up>"))
(global-unset-key (kbd "C-M-<down>"))
#+end_src

This allows quickly jumping to words in a buffer.  Awsum!

#+begin_src emacs-lisp
(global-set-key (kbd "C-M-j") 'ace-jump-mode)
#+end_src

I still consider this a bit of an experiment...

#+begin_src emacs-lisp
(global-set-key (kbd "C-?") 'help-command)
; Find another key for this.
;(global-set-key (kbd "M-?") 'mark-paragraph)
(global-set-key (kbd "C-h") 'delete-backward-char)
(global-set-key (kbd "M-h") 'backward-kill-word)
#+end_src

This is a neat way of adding stuff around other stuff, that I tend to
forget to use.  A candidate for removal.

#+begin_src emacs-lisp
(global-set-key (kbd "M-9")  'corral-parentheses-backward)
(global-set-key (kbd "M-0")  'corral-parentheses-forward)
(global-set-key (kbd "M-[")  'corral-brackets-backward)
(global-set-key (kbd "M-]")  'corral-brackets-forward)
(global-set-key (kbd "M-{")  'corral-braces-backward)
(global-set-key (kbd "M-}")  'corral-braces-forward)

(global-set-key (kbd "M-\"") 'corral-double-quotes-backward)
#+end_src

The ability  to move to the next/prev occurence of the current symbol
is something I missed after using IntelliJ for a while.

#+begin_src emacs-lisp
(load-library "auto-highlight-symbol")
(define-key auto-highlight-symbol-mode-map (kbd "M-p") 'ahs-backward)
(define-key auto-highlight-symbol-mode-map (kbd "M-n") 'ahs-forward)
#+end_src

Interactive regular expressions because I find it tricky to remember
the Emacs syntax for these.

#+begin_src emacs-lisp
(define-key global-map (kbd "C-c r") 'vr/replace)
(define-key global-map (kbd "C-c q") 'vr/query-replace)
#+end_src

I tend to think snippets are kind of silly (why would you keep typing
the same thing?), but with Go it becomes useful...

#+begin_src emacs-lisp
(global-set-key (kbd "C-c y") 'helm-yas-complete)
#+end_src

* Org mode

Load the mode and clean up some keybindings that gets in the way.
Also switch on auto-fill-mode for better prose.

#+begin_src emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :bind (:map org-mode-map
          ("C-<tab>" . nil)
          ("M-h" . nil)
          ("M-S-<up>" . 'org-move-subtree-up)
          ("M-S-<down>" . 'org-move-subtree-down))
  :init
  (add-hook 'org-mode-hook #'auto-fill-mode 1)
  :config
  (electric-indent-mode -1)
  (setq org-edit-src-content-indentation 0
        org-tag-alist '(("integrators" . ?i)
                        ("emacs" . ?e)
                        ("mdg" . ?m)
                        ("read" . ?r)
                        (:newline)
                        ("@office" . ?O)
                        ("@jessica" . ?J))))
#+end_src

Maybe everything should always auto-save all the time..?

#+begin_src emacs-lisp
; Temporarily disable due to annoying whitespace-at-end-of-file-removal
;(add-hook 'auto-save-hook 'org-save-all-org-buffers)
#+end_src

** Support functions

#+begin_src emacs-lisp
(defun o-file (n)
  (format "%s/%s.org" org-directory n))
#+end_src

** Some basic settings.


I use org-mode in three ways: For GTD task management, for roam style
notes, and for very project specific notes.  The latter is scattered
in various contexts, while GTD and roam has their own directories, the
former being the default org directory.

#+begin_src emacs-lisp
(setq org-directory "~/Repository/GTD"
      org-default-notes-file (o-file "inbox")
      org-agenda-restore-windows-after-quit t
      org-agenda-window-setup 'current-window
      org-log-done t)

(setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
#+end_src

** Key bindings

#+begin_src emacs-lisp
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key (kbd "C-c b") 'org-switchb)
#+end_src

** Agenda setup

#+begin_src emacs-lisp
(setq org-agenda-files
      '("~/Repository/GTD"
        "~/Repository/Roam"
        "~/.emacs.d/config.org"))

(setq org-agenda-custom-commands
      '(("r" "Review"
         ((agenda)
          (stuck "")
          (tags-todo "@office")
          (tags-todo "@reading")
          (tags-todo "@home")
          (tags-todo "@project")))
        ("D" "Daily action list"
         ((agenda "" ((org-agenda-ndays 1)
                      (org-agenda-sorting-strategy
                       (quote ((agenda time-up priority-down tag-up) )))
                      (org-deadline-warning-days 0)))))))
#+end_src

** Capture and refile

Capture templates.  So far I've mostly only used TODO and sometimes
Diary.  Consider starting to use the remaining ones, or remove them.

#+begin_src emacs-lisp
(setq org-capture-templates
      `(("t" "TODO" entry (file+headline org-default-notes-file "Tasks")
         "* TODO %i%?")
        ("T" "Tickler" entry (file+headline ,(o-file "tickler") "Tickler")
         "* TODO %i%? \n %U")
        ("n" "Note" entry (file org-default-notes-file)
         "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
        ("d" "Diary" entry (file+datetree "~/Repository/Timeline/Diary.org")
         "* %?\n%U\n" :clock-in t :clock-resume t)
        ("m" "Meeting" entry (file org-default-notes-file)
         "* MEETING on %? :MEETING:\n%U" :clock-in t :clock-resume t)
        ("c" "Contacts" entry (file "~/Repository/People/Contacts.org")
         "* %(org-contacts-template-name)
          :PROPERTIES:
          :EMAIL: %(org-contacts-template-email)
          :PHONE:
          :END:")))
#+end_src

I usually refile from my inbox. Previously ~gtd~ was practically the only
target, but lately I've started refiling into ~config.org~ too. The way I've
used ~gtd~ is basically just as a task list, but with agenda mode I get more
flexibility. Maybe I could refile into the roam folder? That might eventually
spin out of control, but I could build a list of targets based on some criteria.

#+begin_src emacs-lisp
(setq org-refile-targets `((,(o-file "gtd") :maxlevel . 2)
                           (,(o-file "someday") :level . 1)
                           (,(o-file "tickler") :maxlevel . 2)
                           ("~/.emacs.d/config.org" :level . 1)
                           (roam-files :level . 1)))
#+end_src

** Roam

 Let's try to use the new Repository structure for org-roam. An alternative
 would have been to store it as a Context, but it's probably more of a cross
 context thing.

 #+begin_src emacs-lisp
 (setq org-roam-directory "~/Repository/Roam")
 #+end_src

 Start org

 #+begin_src emacs-lisp
(use-package org-roam
     :ensure t
     :bind (("C-c n f" . org-roam-find-file)
            :map org-roam-mode-map
             (("C-c n l" . org-roam)
              ("C-c n g" . org-roam-graph)
              ("C-c n t a" . +org-notes-tags-add)
              ("C-c n t d" . +org-notes-tags-delete))
            :map org-mode-map
              (("C-c n i" . org-roam-insert)
               ("C-c n I" . org-roam-insert-immediate)))
     :hook (after-init . org-roam-mode)
     :init (make-directory org-roam-directory t))
 #+end_src

 Also set up org-journal with org-roam for fleeting notes, i.e. notes
 that are not connected to a particular project.

 #+begin_src emacs-lisp
(use-package org-journal
   :bind
   ("C-c n j" . org-journal-new-entry)
   :custom
   (org-journal-date-prefix "#+title: ")
   (org-journal-file-format "%Y-%m-%d.org")
   (org-journal-dir org-roam-directory)
   (org-journal-date-format "%A, %d %B %Y"))
 #+end_src

** TODO Figure out how to refile stuff now                            :emacs:
   - Note taken on [2020-10-02 Fri 09:47] \\
     Refiling to the Emacs config works fine, and with a small helper function I can
     also refile to the roam directory. There are a few annoyances though:

     1. It refiles below the body; I think it would make more sense (maybe) to refile
        between the heading and the body.
     2. There's no space after the refiled item when it's collapsed. This is not a
        refiling issue though, and can probably be controlled somewhere. All in all
        the vertical whitespace story in org is a bit messed up right  now.
     3. It can refile to any heading in the roam file. Of course. But this is a bit
        excessive. An option would be to have a special heading (e.g. "Tasks") that
        are considered for refiling, or only headings with certain tags (e.g.
        ~tasks~). Both should be supported by the refiling function.
   :LOGBOOK:
   CLOCK: [2020-10-02 Fri 09:09]--[2020-10-02 Fri 09:52] =>  0:43
   :END:
   - Note taken on [2020-10-01 Thu 12:56] \\
     Refiling used to be easy (headings in gtd.org), but what do I do now? One option
     it to keep gtd.org as a thing that I go through every Monday (perhaps rename to
     weekly.org), and let the TODOs in other documents be handled manually (i.e. they
     are added directly, not refiled). Another is to add a "Tasks" heading or similar
     in the various document and somehow make that heading a refile target. This
     sounds kind of neat actually.
** TODO Look into dailies as a replacement for org-journal            :emacs:
   - Note taken on [2020-09-27 Sun 20:53] \\
     I guess the main thing I don't like about org-journal is that it
     doesn't capture journal entries â€“ at least I haven't found a way yet.
     Also it seems to be everything and the kitchen sink.
** TODO Make a template for backlog issues                :integrators:emacs:
* Magit mode

I need C-<tab> for changing buffers.

#+begin_src emacs-lisp
(use-package magit
  :bind (("C-x g" . magit)
         :map magit-mode-map
         ("C-<tab>" . nil)))
#+end_src
