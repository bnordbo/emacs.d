* Basic initialisation
** Performance

Time the startup.

#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+end_src

** Load extra files

Load various add-on functionality.

#+begin_src emacs-lisp
(load-file "~/.emacs.d/elisp/bn.el")
#+end_src

** Configure package installation

Automatically ensure packages are installed if they are not already there.

#+begin_src emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+end_src

Ensure packages are always compiled, and that the latest version available is
used.

#+begin_src emacs-lisp
(use-package auto-compile
  :init (setq load-prefer-newer t)
  :config (auto-compile-on-load-mode))
#+end_src

** General setup

Who wouldn't want sensible defaults?

#+begin_src emacs-lisp
(load-file "~/.emacs.d/elisp/sensible-defaults.el")
(sensible-defaults/use-all-settings)
#+end_src

Set location and time format for sunrise/sunset.

#+begin_src emacs-lisp
(setq calendar-latitude 59.41
      calendar-longitude 9.03
      calendar-time-display-form
      '(24-hours ":" minutes
                 (if time-zone " (") time-zone (if time-zone ")")))
#+end_src

After switcing to native compilation, the warning buffer started to pop up a
lot. Increasing the log level to ~error~ takes care of that annoyance.

#+begin_src emacs-lisp
(setq warning-minimum-level :error)
#+end_src

** Servers

Start emacs-server for integrating neatly with the shell.

#+begin_src emacs-lisp
(use-package server
  :config
  (unless (server-running-p)
    (server-start)))
#+end_src

* Experiments

** Various

This section is for testing out new configurations.

#+begin_src emacs-lisp
; This seems like something I ought to look into to make org-note buffers behave.
; https://depp.brause.cc/shackle/
;(use-package shackle

(use-package writegood-mode
  :config
  (add-to-list 'writegood-weasel-words "actionable"))

(use-package free-keys)
(use-package boon
  :disabled
  :config
  (require 'boon-colemak))
(use-package 0xc
  :defer 15)
(use-package kubel
   :defer 15)

(use-package key-quiz)
#+end_src

** Kotlin LSP

LSP is awesome, but unfortunately difficult to get working with Bazel. This is
mostly for playing around to maybe get that working at some point.

#+begin_src emacs-lisp
(use-package yasnippet)
(use-package company-box)

(use-package lsp-mode
  :init (setq lsp-keymap-prefix "C-c v")
  :hook ((kotlin-mode . lsp-deferred)
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp lsp-deferred)

(use-package kotlin-mode)

;; (use-package helm-lsp
;;   :after lsp-mode
;;   :commands helm-lsp-workspace-symbol
;;   :init (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol))

(use-package ob-kotlin)
#+end_src

* Crux setup

This adds a lot of nify utilities that I've been missing.

#+begin_src emacs-lisp
(use-package crux
  :bind (("C-o" . crux-smart-open-line-above)
         ("C-c d" . crux-duplicate-current-line-or-region)
         ("C-c M-d" . crux-duplicate-and-comment-current-line-or-region)))
#+end_src

* Look and feel

Set up the themes to use, and make it switch automatically to the system
appearence.

#+begin_src emacs-lisp
(use-package leuven-theme)
(use-package gruvbox-theme)
(use-package material-theme)

(defvar theme-sets
  '((leuven ((light . leuven) (dark . leuven-dark)))
    (gruvbox ((light . gruvbox-light-medium) (dark . gruvbox-dark-medium )))
    (material ((light . material-light) (dark . material)))))

(setq default-theme 'leuven)

(defun bn/adjust-face-attributes ()
;  (set-face-attribute 'markdown-table-face nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch))

(add-hook 'ns-system-appearance-change-functions #'bn/apply-theme)
#+end_src

Disable bookmark fontification, at least for now. They tend to spill over...

#+begin_src emacs-lisp
(setq bookmark-fontify nil)
#+end_src

Conserve space and reduce clutter.

#+begin_src emacs-lisp
(menu-bar-mode -1)
(global-unset-key (kbd "M-`"))
(if (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
#+end_src

Fringes adds some air, and is nice for diff highlights etc.

#+begin_src emacs-lisp
(fringe-mode '(6 . 2))
#+end_src

This makes for a much prettier modeline.

#+begin_src emacs-lisp
(use-package powerline
  :defer nil
  :config (powerline-default-theme))
#+end_src

Mostly eliminate minor modes from the modeline. A better approach may be
minions-mode, but this is good /enough/ â€“ for now at least.

#+begin_src emacs-lisp
(use-package diminish
  :config
  (diminish 'auto-fill-mode)
  (diminish 'auto-fill-function)
  (diminish 'which-key-mode))
#+end_src

Start in full screen mode.

#+begin_src emacs-lisp
(toggle-frame-fullscreen)
#+end_src

I find transparency neat for about ten minutes...

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(alpha . (100 . 100)))
#+end_src

Incosolata LGC Markup as it has more glyphs (like em dash) than InconsolataGo.
Libre Baskerville is as nice as Baskerville, and easier to read on the screen.

#+begin_src emacs-lisp
(custom-theme-set-faces
 'user
 '(variable-pitch ((t (:family "Libre Baskerville" :height 130))))
 '(fixed-pitch ((t (:family "Inconsolata LGC Markup" :height 120)))))
#+end_src

Why not?

#+begin_src emacs-lisp
(global-prettify-symbols-mode t)
#+end_src

Highligting the line the cursor is on makes it easier to  spot.

#+begin_src emacs-lisp
(global-hl-line-mode 1)
#+end_src

Define modes and related hooks used for writing prose.

#+begin_src emacs-lisp
(defvar prose-modes '(text-mode git-commit-mode markdown-mode))
(defvar prose-mode-hooks
  (mapcar (lambda (n) (intern (format "%s-hook" n)))
          prose-modes))
#+end_src

Set up prose modes with a variable pitch font. I'm still not sure about this,
but variable pitch fonts /are/ easier to read.

#+begin_src emacs-lisp
(dolist (h prose-mode-hooks)
  (add-hook h (lambda () (variable-pitch-mode 1))))
#+end_src

Prevent horizontal splits for big windows.

#+begin_src emacs-lisp
(setq split-height-threshold nil)
#+end_src

Winner mode allows switching between window configurations. It's a bit
simplistic, but until I find a better alternative, it's way better than noting.

#+begin_src emacs-lisp
(winner-mode 1)
#+end_src

Zoom mode allows me to continue using a three-way split when I disconnect the
monitor. It mostly works great.

#+begin_src emacs-lisp
(use-package zoom
  :diminish
  :init (setq zoom-size '(100 .  40))
  :config (zoom-mode 1))
#+end_src

No ugly line wrapping.

#+begin_src emacs-lisp
(set-default 'truncate-lines t)
#+end_src

I've never missed the bell, visible or otherwise.

#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

* General editing setup

As a rule, I don't want to indent with tabs. Spaces are more predicable, and I
anyway leave it to Emacs most of the time.

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

This permits replacing the contents of a selection by yanking text on top of it,
i.e. the normal behaviour since about 1990. Very useful.

#+begin_src emacs-lisp
(delete-selection-mode t)
#+end_src

Don't create backup or lock files. I've got TimeMachine for backups, and I'm
hopefully the sole user of my system.

#+begin_src emacs-lisp
(setq make-backup-files nil
      create-lockfiles nil)
#+end_src

Unconditionally auto-save all visited files every time Emacs loses focus. This
is a little dangerous, but so far so good...

#+begin_src emacs-lisp
(add-hook 'focus-out-hook
          (lambda ()
            (interactive)
            (save-some-buffers t)))
#+end_src

Some like having the lines numbered, but I find just showing it in the modeline
will usually suffice.

#+begin_src emacs-lisp
(column-number-mode t)
#+end_src

Improve parenthesis handling by highlighting matching ones.

#+begin_src emacs-lisp
(show-paren-mode t)
#+end_src

I want to treat CamelCase as separate words more often than not. Perhaps always.

#+begin_src emacs-lisp
(use-package subword
  :diminish
  :config (global-subword-mode 1))
#+end_src

Try to keep the whitespace under control. The whitespace butler seems to work
pretty well, but it needs an extra hook for org-capture for some reason.

#+begin_src emacs-lisp
(use-package ws-butler
  :diminish
  :init
  (setq require-final-newline t)
  :config
  (ws-butler-global-mode 1)
  (add-hook 'org-capture-mode-hook (lambda () (ws-butler-mode -1))))
#+end_src

Make regular expession alignment always use spaces and not tabs.

#+begin_src emacs-lisp
(defadvice align-regexp (around align-regexp-with-spaces activate)
  (let ((indent-tabs-mode nil))
    ad-do-it))
#+end_src

Getting the environment set correctly is/was a struggle on macOS. I've been
using this for a while, and it seems to work.

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :config (exec-path-from-shell-initialize))
#+end_src

While the default LANG setting seems to make sense, it causes locale warnings.

#+begin_src emacs-lisp
(setenv "LANG" "")
#+end_src

I just use ispell for now, but should look into a way of supporting multiple
dictionaries.

#+begin_src emacs-lisp
(setq ispell-program-name "/usr/local/bin/ispell")
#+end_src

In some cases, like YAML, indentation guides is a must.

#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :hook (yaml-mode . highlight-indent-guides-mode)
  :init
  (setq highlight-indent-guides-method 'bitmap
        highlight-indent-guides-bitmap-function 'highlight-indent-guides--bitmap-line))
#+end_src

Seeing the real width  of the cursor is sometimes useful (e.g. tabs).

#+begin_src emacs-lisp
(setq x-stretch-cursor t)
#+end_src

I quite frequently want to go back to the last edited location. This package
handles that, and also allows to jump to all past edited locations.

#+begin_src emacs-lisp
(use-package goto-last-change
    :bind (("C-;" . goto-last-change)))
#+end_src

It's common to want to mark the region the cursor is currently in. This package
allows selecting increasingly wide regions around the cursor.

#+begin_src emacs-lisp
(use-package expand-region
  :bind ("C-=" . er/expand-region))
#+end_src

* Searching and filtering
Consult is swiper on steroids.

#+begin_src emacs-lisp
(use-package consult
  :bind
  (("M-y" . consult-yank-pop)    ; like yank pop, but also shows preview
   :map bn/search-map
   ("n" . consult-find)          ; (f)ind file
   ("g" . consult-ripgrep)       ; (g)rep files
   ("s" . consult-line)          ; (s)earch for line
   ("i" . consult-imenu)         ; (i)menu completions
   ("j" . consult-mark)          ; (j)ump to mark
   ("f" . consult-focus-lines))  ; (f)ilter lines
  :init
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref))
#+end_src

I often switch from Emacs to searh  for stuff.  Let's put an end to that!

#+begin_src emacs-lisp
(use-package ripgrep
  :defer 15)
#+end_src

* Integrations

Use projectile. This is quite neat in normal projects, but it's struggling in
big monorepos. Hmm.

#+begin_src emacs-lisp
(use-package projectile
; For some reason, this prevents projectile from auto-loading.
;  :after magit                          ; Ensure projectile-vc will use magit
  :bind-keymap ("C-c p" . projectile-command-map))
#+end_src

It seems I'm practically living inside Emacs these days, so I might as well use
it as an entry-point for various web searches.

#+begin_src emacs-lisp
(use-package engine-mode
    :defer 15
    :config (engine-mode))

(defengine duckduckgo
  "https://www.duckduckgo.com/?q=%s"
  :keybinding "d")

(defengine github-loltel-issue-lookup
  "https://github.com/omnicate/loltel/issues/%s"
  :keybinding "i")

(defengine github-loltel-issue-search
  "https://github.com/omnicate/loltel/issues?q=is:issue+is:open+%s"
  :keybinding "s")

(defengine github-loltel-issue-label
  "https://github.com/omnicate/loltel/issues?q=is:issue+is:open+label:%s"
  :keybinding "l")
#+end_src

Elfeed seems to be the best choice for RSS feeds today, and also supports
defining the feeds in org! I could probably point it to the roam directory and
have it pick up all the feeds based on tags, but that seems a bit extreme...

#+begin_src emacs-lisp
(use-package elfeed-org
  :disabled t
  :defer 15
  :init
  (setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org"))
  :config
  (elfeed-org))
#+end_src

Pick up authentication info.

#+begin_src emacs-lisp
(setq auth-sources '("~/.authinfo"))
#+end_src

In practice I hardly ever answer anything but yes.

#+begin_src emacs-lisp
(setq confirm-kill-processes nil)
#+end_src

Integration with reveal.js. Along with org-mode and ditaa, this is a pretty
powerful way of making presentations.

#+begin_src emacs-lisp
(use-package ox-reveal
  :init (setq org-reveal-root "file:///Users/bn/.emacs.d/emacs-reveal-submodules/reveal.js"))
(use-package htmlize)
#+end_src

** Eshell

I have a somewhat troubled relationship with eshell. On one side it's quite neat
and convenient, ong the other hand it too frequently falls apart and I have to
switch to a terminal.

#+begin_src emacs-lisp
(use-package eshell
  :config (toggle-truncate-lines -1))
#+end_src

** PlantUML

PlantUML not as neat as websequencediagrams, but who cares when the Emacs
support is so great! I'm a bit confused about how plantuml-mode relates to
ob-plantuml though. The latter is bundled with Emacs, and requires the fragile
JAR setting below. But it also seems to be more freqently updated.

#+begin_src emacs-lisp
(use-package plantuml-mode
  :init
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (setq plantuml-executable-path "/usr/local/bin/plantuml"
        org-plantuml-jar-path "/usr/local/Cellar/plantuml/1.2021.9/libexec/plantuml.jar"
        plantuml-default-exec-mode 'executable))
#+end_src

* Programming language support

Some useful defaults for all programming languages.

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'electric-pair-local-mode)
(add-hook 'prog-mode-hook 'electric-indent-local-mode)
(add-hook 'prog-mode-hook 'auto-highlight-symbol-mode)
#+end_src

This works surprisingly well for navigating code, even in big monorepos.
  
#+begin_src emacs-lisp
(use-package dumb-jump
  :config
  (setq xref-backend-functions #'dumb-jump-xref-activate))
#+end_src

** Erlang

#+begin_src emacs-lisp
(use-package erlang
  :disabled t
  :config
  (add-to-list 'erlang-tags-file-list "~/src/bn/loltel/connectivity/erlang/TAGS"))
#+end_src

** Go

This sets up Go mode with some basic support. The jump to definition support is
limited, unfortunately.

#+begin_src emacs-lisp
(use-package go-eldoc)

(use-package go-mode
  :hook (before-save . gofmt-before-save)
  :init
  (exec-path-from-shell-copy-env "GOPATH")
  (setq go-eldoc-gocode "/Users/bn/go/bin/gocode")
  (add-hook 'go-mode-hook (lambda ()
                            (setq tab-width 4)
                            (subword-mode 1)
                            (go-eldoc-setup))))

(use-package go-fill-struct)
(use-package go-playground
  :defer 15)
#+end_src

** Elisp

   From what I hear paredit is passÃ©, and Lispy is the new kid on the block, but
   I gave up and reverted  to paredit.

#+begin_src emacs-lisp
(use-package paredit
  :defer 5
  :diminish)
#+end_src

#+begin_src emacs-lisp
(use-package prism)
(use-package eldoc
  :diminish)

(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (paredit-mode 1)
            (prism-mode 1)
            (eldoc-mode 1)))

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (shell . t)))
#+end_src

** Shell

#+begin_src emacs-lisp
(add-hook 'sh-mode-hook
          (lambda ()
            (setq sh-basic-offset 4
                  sh-indentation 4)))
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)
#+end_src

** Graphviz

#+begin_src emacs-lisp
(use-package graphviz-dot-mode
  :init (setq graphviz-dot-view-command "xdot %s"))
#+end_src

** Haskell

#+begin_src emacs-lisp
(use-package haskell-mode
  :disabled t
  :init
  (add-hook 'haskell-mode-hook 'subword-mode)
  (add-hook 'haskell-mode-hook 'haskell-doc-mode))
#+end_src

** Rust

#+begin_src emacs-lisp
(use-package rust-mode
  :disabled t
  :init
  (setq racer-cmd "~/bin/racer"
        racer-rust-src-path "~/src/thirdparty/rust/src"
        company-tooltip-align-annotations t)
  (add-hook 'rust-mode-hook 'cargo-minor-mode)
  (add-hook 'rust-mode-hook 'racer-mode)
  (add-hook 'racer-mode-hook 'company-mode))
#+end_src

** Markdown

#+begin_src emacs-lisp
(use-package markdown-mode
  :init
  (setq markdown-open-command "~/bin/mark")
  (add-hook 'markdown-mode-hook 'visual-line-mode))
#+end_src

** Yaml

#+begin_src emacs-lisp
(use-package yaml-mode
  :init (add-hook 'yaml-mode-hook (lambda () (variable-pitch-mode -1))))
#+end_src

** XML

#+begin_src emacs-lisp
;;(set-face-attribute 'nxml-element-local-name nil :inherit 'fixed-pitch)
#+end_src

** Bazel

#+begin_src emacs-lisp
(use-package bazel)
#+end_src

** Rego

Syntax highlighting and REPL support for OPAs Rego configuration language.

#+begin_src emacs-lisp
(use-package rego-mode
  :custom
  (rego-repl-executable "/usr/local/bin/opa")
  (rego-opa-command "/usr/local/bin/opa"))
#+end_src

** Protobuf
#+begin_src emacs-lisp
(use-package protobuf-mode)
#+end_src

* Completion

I used to use Helm, but switched to Vertico because I like it's modular
approach, and integration with the default completion system. And after all I
only used a fraction of Helm's functionality...

#+begin_src emacs-lisp
(use-package vertico
  :init (vertico-mode))
#+end_src

The directory extension makes Vertico behave more like Ido, which I find more
pleasant.

#+begin_src emacs-lisp
(use-package vertico-directory
  :load-path "~/src/forks/vertico/extensions"
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

The orderless completion package is snappy and matches just the way I want.

#+begin_src emacs-lisp
(use-package orderless
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

Marginalia decorates the completion listings neatly with additional information
such as docstrings.

#+begin_src emacs-lisp
(use-package marginalia
  :bind (:map minibuffer-local-map
              ("M-a" . marginalia-cycle))
  :init (marginalia-mode))
#+end_src

Embark works a bit like a context menu that can be used anywhere. I kind of like
the idea, but so far I haven't used it a lot.

#+begin_src emacs-lisp
(use-package embark
  :bind
  (("C-. ." . embark-act)
   ("C-. ," . embark-dwim))
  :init
  (setq prefix-help-command #'embark-prefix-help-commant))
#+end_src

* Key bindings
** Settings
On Mac, map the command key to meta and keep the normal behaviour of option.

#+begin_src emacs-lisp
(setq mac-command-modifier 'meta
      mac-option-modifier nil)
#+end_src

This pops up a list of possible next keys in the minibuffer. It's incredibly
useful.

#+begin_src emacs-lisp
(use-package which-key
  :config (which-key-mode 1))
#+end_src

** Personal keymaps

#+begin_src emacs-lisp
(define-prefix-command 'bn/search-map)
(bind-key  "C-c s" 'bn/search-map)

(define-prefix-command 'bn/editing-map)
(bind-key  "C-c e" 'bn/editing-map)

(define-prefix-command 'bn/window-map)
(bind-key  "C-c e" 'bn/window-map)
#+end_src


** New bindings

Global key bindings.

#+begin_src emacs-lisp
(bind-keys :map global-map
           ("C-<tab>" . other-window)
           ("C-S-<tab>" bn/other-window-back)
           ("M-/" . hippie-expand))
#+end_src

Other window manipulation commands.

#+begin_src emacs-lisp
(bind-keys :map bn/window-map
           ("s" . 'window-swap-states))
#+end_src

Text manipulation commands.

#+begin_src emacs-lisp
(bind-keys :map bn/editing-map
           ("\\" . 'align-regexp)
           ("<SPC>" 'just-one-space))
#+end_src

The ability  to move to the next/prev occurence of the current symbol
is something I missed after using IntelliJ for a while.

#+begin_src emacs-lisp
(use-package auto-highlight-symbol
  :diminish
; Does not work since use-package will try to load auto-highlight-symbol too
;  :hook ((prog-mode . auto-highlight-symbol-mode))
  :bind (("M-p" . ahs-backward)
         ("M-n" . 'ahs-forward))
  :init (setq ahs-idle-interval 1.0
              ahs-default-range 'ahs-range-whole-buffer
              ahs-inhibit-face-list '(font-lock-comment-delimiter-face
                                      font-lock-comment-face
                                      font-lock-doc-face
                                      font-lock-doc-string-face
                                      font-lock-string-face)))
#+end_src

Interactive regular expressions because I find it tricky to remember
the Emacs syntax for these.

#+begin_src emacs-lisp
(use-package visual-regexp
  :bind (:map bn/search-map
              ("r" . 'vr/replace)
              ("q" . 'vr/query-replace)))
#+end_src

** Rebindings
Rebind ~C-h~, and use it for deleting backwards. I still consider this a bit of
an experiment...

#+begin_src emacs-lisp
(global-set-key (kbd "C-?") 'help-command)
(global-set-key (kbd "C-h") 'delete-backward-char)
(global-set-key (kbd "M-h") 'backward-kill-word)
#+end_src

* Org mode
Load the org-mode and do basic configuration:

- Set up global keybindings.
- Clear some local keybindings that gets in the way.
- Also switch on auto-fill-mode in order to make prose easier to write.
- Ensure tables and blocks are still in monospace.
#+begin_src emacs-lisp
(use-package org
  :after diminish org-superstar
  :bind (("C-c a" . org-agenda)
         ("C-c c" . org-capture)
         ("C-c l" . org-store-link)
         ("C-c C-x C-j" . org-clock-goto)
         ("C-. o j" . org-clock-goto)
         ("C-. o o" . org-clock-out)
         :map org-mode-map
         ("C-c t" . org-todo)
         ("C-c M-p" . org-move-subtree-up)
         ("C-c M-n" . org-move-subtree-down)
         ("C-x n w" . org-toggle-narrow-to-subtree)
         ("C-. h" . consult-org-heading)
         ("C-<tab>" . nil)
         ("M-h" . nil))
  :init
  (setq org-startup-folded t
        org-edit-src-content-indentation 0
        org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-src-window-setup 'current-window
        org-clock-idle-time 10
        org-clock-in-switch-to-state "NEXT"
        org-clock-out-remove-zero-time-clocks t
        org-clock-out-when-done t
        org-goto-interface 'outline-path-completion
        org-outline-path-completion-in-steps nil
        org-pretty-entities t
        org-modules '(ol-w3m ol-bibtex ol-docview ol-info ol-mhe)
        org-fontify-whole-heading-line t
        org-use-sub-superscripts "{}"
        org-M-RET-may-split-line nil
        org-ditaa-jar-path "/Users/bn/.emacs.d/ditaa.jar")
  (add-hook 'org-mode-hook
            (lambda ()
              (auto-fill-mode 1)
              (org-indent-mode 1)
              (electric-indent-local-mode -1)
              (diminish 'org-indent-mode)
              (diminish 'buffer-face-mode))))
#+end_src

Set up fast selection for tags. Lots of them! Lowercase characters are for
categories, uppercase for contexts, including people. I could perhaps switch to
digits for contexts if clashes become a problem..

#+begin_src emacs-lisp
(setq org-tag-alist '(("admin" . ?a)
                      ("emacs" . ?e)
                      ("integrators" . ?i)
                      ("mdg" . ?m)
                      ("org" . ?o)
                      ("read" . ?r)
                      (:newline)
                      ("easy" . ?z)
                      ("hard" . ?h)
                      (:newline)
                      ("@home" . ?H)
                      ("@standup" . ?S)))
#+end_src

Properties that should be set across the board.

#+begin_src emacs-lisp
(setq org-global-properties
      '(("Effort_ALL" . "0:10 0:30 1:00 2:00 4:00 7:00")))
#+end_src

For the column view, I'd like to see the basics as compact as possible.

#+begin_src emacs-lisp
(setq org-columns-default-format
      "%40ITEM(Task) %9TODO(State) %6Effort(Effort){:} %6CLOCKSUM(Sum) %ALLTAGS(Tags)")
#+end_src

** Some basic settings.
I keep most of the stuff in my stuff repository. For now fleeting notes are
recorded in an Inbox, which is a relic from an older GTD structure. Items are
archived in datetrees per file to retain context..

#+begin_src emacs-lisp
(setq org-directory "~/Repository/Org"
      org-default-notes-file "~/Repository/Org/Inbox.org"
      org-archive-location "%s_archive::datetree/"
      org-stuck-projects '("/+PROJ" ("NEXT" "TODO") ("@buy") "")
      org-agenda-restore-windows-after-quit t
      org-agenda-window-setup 'current-window
      org-log-done 'time
      org-log-redeadline nil
      org-log-reschedule nil
      org-read-date-prefer-future 'time)
#+end_src

Basic GTD-like keywords. I like recording notes, so prompt for an explanation
when changing to WAITING or CANCELLED. This is also used for sort order.

#+begin_src emacs-lisp
(setq org-todo-keywords '((sequence "NEXT(n)" "TODO(t)" "PROJ(p)" "INACTIVE(i)"
                                    "SOMEDAY(s)" "WAITING(w@)"
                                    "|" "DONE(d)" "CANCELLED(c@)")))
#+end_src

Emacs Lisp is a popular source language, so give it  its own key. As both "e"
and "E" are taken, it will have to live under "m".

#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
             '("m" . "src emacs-lisp"))
#+end_src

Exporting to Slack allows me to edit the message in e.g. an org-mode note.

#+begin_src emacs-lisp
(use-package ox-slack
  :defer 10)
#+end_src

#+begin_src emacs-lisp
(use-package org-superstar
  :init
  (add-hook 'org-mode-hook 'org-superstar-mode))
#+end_src

I prefer sparse trees to only show the matched entries. This fixes that in most cases.

#+begin_src emacs-lisp
(add-to-list 'org-show-context-detail '(tags-tree . local))
#+end_src

** Extras
Support for pasting and dropping images. Setting ~org-image-actual-width~ to
~nil~ allows specifying e.g. ~#+org_attr: :width 600~ to limit the width of the
image, otherwise they sometimes appear very wide.

#+begin_src emacs-lisp
(use-package org-download
  :defer 5
  :init
  (setq org-image-actual-width nil
        org-download-image-dir "~/Repository/Org/Images"))
#+end_src

This allows bookmarking org headings using ~C-x r m~.

#+begin_src emacs-lisp
(use-package org-bookmark-heading)
#+end_src

** Exporting
Don't prompt when evaluating ditaa code blocks.

#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate
      (lambda (lang body)
        (not (member lang '("ditaa" "plantuml" "bash")))))
#+end_src

Enable more languages.

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((ditaa . t)))
#+end_src

** Pomodoro
#+begin_src emacs-lisp
(use-package org-pomodoro
  :init (setq org-pomodoro-length 20))
#+end_src

** Contacts

It's easy to just stuff contacts into some random address book (GMail, your
phone, ...), but let's take a step back: Contacts are /people/ that you deal
with. Many of them you will deal with for years or decades. They should not just
be thrown into an address book as an afterthought.

#+begin_src emacs-lisp
; 20210427 Seems unavailable?
;(use-package org-contacts
;  :after org
;  :custom (org-contacts-files '("~/Repository/Org/People.org")))
#+end_src

** Bookmarks
#+begin_src emacs-lisp
(use-package org-cliplink
  :bind (:map org-mode-map
              ("C-c L" . org-cliplink)))
#+end_src

** Agenda setup
This is has been changing a lot, but the current idea is that I want to fetch
tasks from:

- Calendars, to show in the weekly agenda view.
- My projects repository, which is kind of legacy.
- Everything inside the interests and roles contexts.
   
#+begin_src emacs-lisp
(setq org-agenda-files
      (append `("~/Repository/Org"
                "~/.emacs.d/calendars")))
#+end_src

The agenda has views for the inbox, all my next actions, and all my projects.
But I'm planning to incorporate all of this information in one view, currently
dubbed "review".

#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      `(("i" "Inbox"
         ((todo "NEXT"
                ((org-agenda-files (list "~/Repository/Org/Inbox.org"))))))
        ("n" "Next actions" todo "NEXT")
        ("pa" "Projects" todo "PROJ")
        ("pw" "Projects/WG2" tags-todo "+TODO=\"PROJ\"+wg2")
         ("r" "Review"
         ((agenda)
          (todo "PROJ"
                ((org-agenda-overriding-header "Active projects:")))
          ,bn/org-agenda--active-projects))))
#+end_src

Start agenda on the current day rather than the first day of the week.

#+begin_src emacs-lisp
(setq org-agenda-start-on-weekday nil)
#+end_src

While org-ql is really powerful and pleasant to use, I'm not sure how it fits
into my workflow yet, except for one-off searches. Maybe I could/should use it
to build the nice and useful agenda view I've been dreaming off lately..?

#+begin_src emacs-lisp
(use-package org-ql)
#+end_src

** Capture and refile
Capture templates. NEXT is used for tasks I can start working on right away,
while TODO are effectively blocked. PROJ is for longer lived tasks with
sub-tasks. These are treated separately in weekly and daily reviews. MEETING is
used to record meetings, but I don't use it very often, so it's a candidate for
removal.

I use Diary to make a quick summary of the day, or when I have completed
significant tasks. Contacts is for recording new contacts, but it's mostly
experimental. Then there are templates for recurring meetings/standups that I
use for recording the outcome of these, and for tracking the time spent.

#+begin_src emacs-lisp
(setq org-capture-templates
      `(("n" "NEXT" entry (file org-default-notes-file)
         "* NEXT %i%?")
        ("t" "TODO" entry (file org-default-notes-file)
         "* TODO %i%?")
        ("p" "PROJ" entry (file org-default-notes-file)
         (file "~/.emacs.d/templates/project-capture.txt"))
        ("m" "Meeting" entry (file+datetree "~/Roles/TechLeadWG2/Meetings.org")
         "* NEXT %? :meeting:\n%U" :clock-in t :clock-resume t)
        ("d" "Diary" entry (file+datetree "~/Repository/Timeline/Diary.org")
         "* %?\n%U\n" :clock-in t :clock-resume t)
;        ("c" "Contacts" entry (file ,(car (org-contacts-files)))
;         (file "~/.emacs.d/templates/contacts-capture.txt"))
        ("s" "Standup" item
         (file+olp+datetree "~/Roles/TechLeadWG2/Recurring.org" "Standups")
         "%?\n" :clock-in t :clock-resume t)
        ("l" "Tech lead sync" item
         (file+olp+datetree "~/Roles/TechLeadWG2/Recurring.org" "Tech lead syncs")
         "%?\n" :clock-in t :clock-resume t)
        ("b" "Bookmark" entry (file "~/Bookmarks.org")
         "* %(org-cliplink-capture)\n%U\n%?" :empty-lines 1)))
#+end_src

I've dumbed down the refiling targets to just consider all the agenda files at
level one.

#+begin_src emacs-lisp
(setq org-refile-targets '((nil :maxlevel . 5)
                           (org-agenda-files :maxlevel . 2)))
#+end_src

** PIM using org-roam
Let's try to use the new Repository structure for org-roam. An alternative
 would have been to store it as a Context, but it's probably more of a cross
 context thing.

#+begin_src emacs-lisp
(setq org-roam-directory "~/Repository/Roam")
#+end_src

Set up org-roam v2 behind the ~C-c n~ prefix:

#+begin_src emacs-lisp
(use-package org-roam
  :after org
  :bind
  (("C-c n f" . org-roam-node-find)
   ("C-c n c" . org-roam-node-capture)
   ("C-c n j j" . org-roam-dailies-capture-today)
   ("C-c n j t" . org-roam-dailies-goto-today)
   ("C-c n j y" . org-roam-dailies-goto-yesterday)
   ("C-c n j d" . org-roam-dailies-goto-date)
   :map org-mode-map
   ("C-c n i" . org-roam-node-insert)
   ("C-c n l" . org-roam-buffer-toggle)
   ("C-c n x" . org-roam-node-random)
   ("C-c n a a" . org-roam-alias-add)
   ("C-c n a r" . org-roam-alias-remove)
   ("C-c n r a" . org-roam-ref-add)
   ("C-c n r r" . org-roam-ref-remove)
   ("C-c n t a" . org-roam-tag-add)
   ("C-c n t r" . org-roam-tag-remove))
  :init (setq org-roam-v2-ack t)
  :custom
  (org-roam-node-display-template "${title:*} ${tags:20}" "Widen the tag column")
  (org-roam-capture-templates '(("d" "default" plain "%?"
                                 :if-new (file+head "${slug}.org"
                                                    "#+TITLE: ${title}\n#+DATE: %T\n")
                                 :unnarrowed t)))
  :config
  (org-roam-setup))
#+end_src

I switched from org-journal to org-roam-dailies as I don't use any of the bells
and whistles of the former, and this integrates better with org-roam.

#+begin_src emacs-lisp
(setq org-roam-dailies-capture-templates
      '(("d" "default" entry
         "* %?"
         :if-new (file+head "%<%Y-%m-%d>.org"
                            "#+title: %<%Y-%m-%d>\n"))))
#+end_src


** PDF notes and annotations using org-noter
This is incredibly useful for research. Currently only works with PDF, but it
ought to be able to make it work for ePub too.

#+begin_src emacs-lisp

(use-package org-noter
  :after org-roam
  :bind (("C-c n o" . org-noter)
         :map org-noter-doc-mode-map
         (("M-i" . zp/org-noter-insert-precise-note-dwim)))
  :init
  (setq org-noter-notes-search-path (list org-roam-directory)
        org-noter-notes-window-location 'horizontal-split))

;; Move these to a separate "Media" section
(use-package pdf-tools
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :demand
  :config
  (pdf-tools-install :no-query))

(use-package org-pdftools
  :hook (org-load . org-pdftools-setup-link))

(use-package nov
  :mode ("\\.\\(epub\\|mobi\\)\\'" . nov-mode))

(use-package org-noter-pdftools
  :after org-noter
  :config
  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src

* Version control

Bind magit to ~C-x g~, and unbind ~C-<tab>~ since it's used for switching
buffers.

#+begin_src emacs-lisp
(use-package magit
  :bind (("C-x g" . magit)
         :map magit-mode-map
         ("C-<tab>" . nil))
  :init (setq magit-git-executable "/usr/bin/git"))
#+end_src

Forge hooks into magit and provides access to GitHub. It's slow on the monorepo
at work, but reducing the topic list limit seems to help.

#+begin_src emacs-lisp
(use-package forge
  :after magit
  :init
  (setq forge-topic-list-limit '(17 .  3)))
#+end_src

This allows visiting the current file in the remote repo. Useful for giving
others references to code.

#+begin_src emacs-lisp
(use-package browse-at-remote)
#+end_src

It is neat if not terribly useful to see the changes since last commit in the
buffer margin.

#+begin_src emacs-lisp
(use-package diff-hl
  :hook '((prog-mode . turn-on-diff-hl-mode)
          (vc-dir-mode . turn-on-diff-hl-mode)))
#+end_src

Finally, reduce the GC threshold a bit to make the user experience better.

#+begin_src emacs-lisp
(setq gc-cons-threshold (* 4 1000 1000))
#+end_src
