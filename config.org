* Basic initialisation
** Performance

Time the startup.

#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+end_src

Increase GC threshold during startup.

#+begin_src emacs-lisp
(setq gc-cons-threshold (* 50 1000 1000))
#+end_src

** Load extra files

Load various add-on functionality.

#+begin_src emacs-lisp
(load-file "~/.emacs.d/elisp/bn.el")
(load-file "~/.emacs.d/elisp/org-tags.el")
#+end_src

** Configure package installation

Automatically ensure packages are installed if they are not already there.

#+begin_src emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+end_src

Ensure packages are always compiled, and that the latest version available is
used.

#+begin_src emacs-lisp
(use-package auto-compile
  :defer t
  :init (setq load-prefer-newer t)
  :config (auto-compile-on-load-mode))
#+end_src

** General setup

Who wouldn't want sensible defaults?

#+begin_src emacs-lisp
(load-file "~/.emacs.d/sensible-defaults.el")
(sensible-defaults/use-all-settings)
#+end_src

Set location and time format for sunrise/sunset.

#+begin_src emacs-lisp
(setq calendar-latitude 59.41
      calendar-longitude 9.03
      calendar-time-display-form
      '(24-hours ":" minutes
                 (if time-zone " (") time-zone (if time-zone ")")))
#+end_src

** Servers

Start emacs-server for integrating neatly with the shell.

#+begin_src emacs-lisp
(use-package server)
(if (not (server-running-p))
  (server-start))
#+end_src

* Experiments

This section is for testing out new configurations.

#+begin_src emacs-lisp
(use-package dumb-jump
  :defer 1
  :config
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))

(use-package org-bookmark-heading
  :defer t)
(use-package free-keys
  :defer t)
(global-hl-line-mode 1)
(use-package boon
  :defer t
  :config
  (require 'boon-colemak)
  (define-key boon-x-map "x" 'helm-M-x))
(use-package diminish
  :defer t
  :config
  (diminish 'auto-fill-mode)
  (diminish 'auto-fill-function))
(use-package powerline
  :defer t
  :config (powerline-default-theme))
(use-package 0xc
  :defer t)
(use-package swiper
  :defer t)
(use-package kubel
   :defer 5)
#+end_src

* Crux setup

This adds a lot of nify utilities that I've been missing.

#+begin_src emacs-lisp
(use-package crux
  :defer t
  :bind (("C-o" . crux-smart-open-line-above)
         ("C-c C-D" . crux-delete-file-and-buffer)
         ("C-c d" . crux-duplicate-current-line-or-region)
         ("C-c M-d" . crux-duplicate-and-comment-current-line-or-region)))
#+end_src

* Look and feel

Set up the themes to use, and make it switch automatically to the system
appearence.

#+begin_src emacs-lisp
(use-package leuven-theme)

(defvar default-light-theme 'leuven)
(defvar default-dark-theme 'leuven-dark)

(defun bn/apply-theme (appearance)
  "Load theme, taking current system APPEARANCE into consideration."
  (mapc #'disable-theme custom-enabled-themes)
  (pcase appearance
    ('light (load-theme default-light-theme t))
    ('dark (load-theme default-dark-theme t))))

(add-hook 'ns-system-appearance-change-functions #'bn/apply-theme)
#+end_src

Conserve space and reduce clutter.

#+begin_src emacs-lisp
(menu-bar-mode -1)
(global-unset-key (kbd "M-`"))
(if (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
#+end_src

I don't think I've ever had any use of seeing the minor modes in the mode line.
This saves a lot of space that I can surely find some other use for.

#+begin_src emacs-lisp
;; (use-package minions
;;   :config
;;   (setq minions-mode-line-lighter ""
;;         minions-mode-line-delimiters '("" . ""))
;;   (minions-mode 1))
#+end_src

Run in full screen mode. On Mac this no longer creates a new desktop, but rather
an undecorated, maximised frame. It's a bit funky, but I have not had time to
look into it yet.

#+begin_src emacs-lisp
(toggle-frame-fullscreen)
#+end_src

I find transparency neat for about ten minutes...

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(alpha . (100 . 100)))
#+end_src

Incosolata LGC Markup as it has more glyphs (like em dash) than InconsolataGo.
Libre Baskerville is as nice as Baskerville, and easier to read on the screen.

#+begin_src emacs-lisp
(custom-theme-set-faces
 'user
 '(variable-pitch ((t (:family "Libre Baskerville" :height 130))))
 '(fixed-pitch ((t (:family "Inconsolata LGC Markup" :height 130)))))
#+end_src

Why not?

#+begin_src emacs-lisp
(global-prettify-symbols-mode t)
#+end_src

Define modes and related hooks used for writing prose.

#+begin_src emacs-lisp
(defvar prose-modes '(text-mode git-commit-mode markdown-mode))
(defvar prose-mode-hooks
  (mapcar (lambda (n) (intern (format "%s-hook" n)))
          prose-modes))
#+end_src

Set up prose modes with a variable pitch font. I'm still not sure about this,
but variable pitch fonts /are/ easier to read.

#+begin_src emacs-lisp
(dolist (h prose-mode-hooks)
  (add-hook h (lambda () (variable-pitch-mode 1))))
#+end_src

Prevent horizontal splits for big windows.

#+begin_src emacs-lisp
(setq split-height-threshold nil)
#+end_src

Zoom mode allows me to continue using a three-way split when I disconnect the
monitor. It mostly works great.

#+begin_src emacs-lisp
(use-package zoom
  :defer t
  :diminish
  :init (setq zoom-size '(100 .  40))
  :config (zoom-mode 1))

#+end_src

No ugly line wrapping.

#+begin_src emacs-lisp
(set-default 'truncate-lines t)
#+end_src

I've never missed the bell, visible or otherwise.

#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

Auto-highlighting the current symbol can be quite useful, not only when
programming.

#+begin_src emacs-lisp
(setq ahs-idle-interval 1.0
      ahs-default-range 'ahs-range-whole-buffer
      ahs-inhibit-face-list '(font-lock-comment-delimiter-face
                              font-lock-comment-face
                              font-lock-doc-face
                              font-lock-doc-string-face
                              font-lock-string-face))
#+end_src

* General editing setup

As a rule, I don't want to indent with tabs. Spaces are more predicable, and I
anyway leave it to Emacs most of the time.

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

This permits replacing the contents of a selection by yanking text on top of it,
i.e. the normal behaviour since about 1990. Very useful.

#+begin_src emacs-lisp
(delete-selection-mode t)
#+end_src

Don't create backup or lock files. I've got TimeMachine for backups, and I'm
hopefully the sole user of my system.

#+begin_src emacs-lisp
(setq make-backup-files nil
      create-lockfiles nil)
#+end_src

Unconditionally auto-save all visited files every time Emacs loses focus.

#+begin_src emacs-lisp
(add-hook 'focus-out-hook
          (lambda ()
            (interactive)
            (save-some-buffers t)))
#+end_src

Some like having the lines numbered, but I find just showing it in the modeline
will usually suffice.

#+begin_src emacs-lisp
(column-number-mode t)
#+end_src

Improve parenthesis handling by highlighting matching ones.

#+begin_src emacs-lisp
(show-paren-mode t)
#+end_src

I want to treat CamelCase as separate words more often than not. Perhaps always.

#+begin_src emacs-lisp
(use-package subword
  :defer t
  :diminish
  :config (global-subword-mode 1))
#+end_src

#+begin_src emacs-lisp
(use-package multiple-cursors
    :defer 5)
#+end_src

Try to keep the whitespace under control. The whitespace butler seems to work
pretty well, but it needs an extra hook for org-capture for some reason.

#+begin_src emacs-lisp
(add-hook 'org-capture-mode-hook (lambda () (ws-butler-mode -1)))
(setq require-final-newline t)
#+end_src

Make regular expession alignment always use spaces and not tabs.

#+begin_src emacs-lisp
(defadvice align-regexp (around align-regexp-with-spaces activate)
  (let ((indent-tabs-mode nil))
    ad-do-it))
#+end_src

Getting the environment set correctly is/was a struggle on macOS. I've been
using this for a while, and it seems to work.

#+begin_src emacs-lisp
(exec-path-from-shell-initialize)
#+end_src

I just use ispell for now, but should look into a way of supporting multiple
dictionaries.

#+begin_src emacs-lisp
(setq ispell-program-name "/usr/local/bin/ispell")
#+end_src

In some cases, like YAML, indentation guides is a must.

#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :defer t
  :hook (yaml-mode . highlight-indent-guides-mode)
  :init
  (setq highlight-indent-guides-method 'bitmap
        highlight-indent-guides-bitmap-function 'highlight-indent-guides--bitmap-line))
#+end_src

I used to use ace, but it would sometimes be very slow. In general I wonder if
maybe isearch is actually a better approach. Simpler, more flexible, and mostly
as quick.

#+begin_src emacs-lisp
(use-package avy
  :defer t
  :bind ("C-M-j" . 'avy-goto-char))
#+end_src

* Integrations

I often switch from Emacs to searh  for stuff.  Let's put an end to that!

#+begin_src emacs-lisp
(use-package ripgrep
  :defer 5)
#+end_src

Use projectile. This is quite neat in normal projects, but it's struggling in
big monorepos. Hmm.

#+begin_src emacs-lisp
(use-package projectile
  :defer t
  :bind (("C-c p" . projectile-command-map)))
#+end_src

It seems I'm practically living inside Emacs these days, so I might as well use
it as an entry-point for various web searches.

#+begin_src emacs-lisp
(use-package engine-mode
    :defer t)

(defengine duckduckgo
  "https://www.duckduckgo.com/?q=%s"
  :keybinding "d")

(defengine github-loltel-issue-lookup
  "https://github.com/omnicate/loltel/issues/%s"
  :keybinding "i")

(defengine github-loltel-issue-search
  "https://github.com/omnicate/loltel/issues?q=is:issue+is:open+%s"
  :keybinding "s")

(defengine github-loltel-issue-label
  "https://github.com/omnicate/loltel/issues?q=is:issue+is:open+label:%s"
  :keybinding "l")
#+end_src

Elfeed seems to be the best choice for RSS feeds today, and also supports
defining the feeds in org! I could probably point it to the roam directory and
have it pick up all the feeds based on tags, but that seems a bit extreme...

#+begin_src emacs-lisp
(use-package elfeed-org
  :defer t
  :init
  (setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org"))
  :config
  (elfeed-org))
#+end_src

Pick up authentication info.

#+begin_src emacs-lisp
(setq auth-sources '("~/.authinfo"))
#+end_src

* Programming language support

** Go

This sets up Go mode with some basic support.  The jump to definition
support is extremely limited, unfortunately.

#+begin_src emacs-lisp
(use-package go-eldoc
  :defer t)

(use-package go-mode
  :defer t
  :hook (before-save . gofmt-before-save)
  :init
  (exec-path-from-shell-copy-env "GOPATH")
  (setq go-eldoc-gocode "/Users/bn/go/bin/gocode")
  :config
  (add-hook 'go-mode-hook (lambda ()
                            (setq tab-width 4)
                            (auto-highlight-symbol-mode 1)
                            (electric-pair-mode 1)
                            (electric-indent-local-mode 1)
                            (subword-mode 1)
                            (go-eldoc-setup))))

(use-package go-fill-struct
  :defer t)
(use-package go-playground
  :defer 5)
#+end_src

** Elisp

   From what I hear paredit is passé, and Lispy is the new kid on the block, but
   I gave up and reverted  to paredit.

#+begin_src emacs-lisp
(use-package paredit
  :defer 5
  :diminish)
#+end_src

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :defer t)
(use-package eldoc
  :defer t
  :diminish)

(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (paredit-mode 1)
            (rainbow-delimiters-mode 1)
            (eldoc-mode 1)))

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)))
#+end_src

** Shell

#+begin_src emacs-lisp
(add-hook 'sh-mode-hook
          (lambda ()
            (setq sh-basic-offset 2
                  sh-indentation 2)))
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)
#+end_src

** Graphviz

#+begin_src emacs-lisp
(use-package graphviz-dot-mode
  :defer t
  :init (setq graphviz-dot-view-command "xdot %s"))
#+end_src

** Haskell

#+begin_src emacs-lisp
(use-package haskell-mode
  :defer t)

(add-hook 'haskell-mode-hook
          (lambda ()
            (subword-mode 1)
            (electric-pair-local-mode 1)
            (haskell-doc-mode 1)))
#+end_src

** Rust

#+begin_src emacs-lisp
(use-package rust-mode
  :defer t)

(setq racer-cmd "~/bin/racer"
      racer-rust-src-path "~/src/thirdparty/rust/src"
      company-tooltip-align-annotations t)

(add-hook 'rust-mode-hook
          (lambda ()
            (cargo-minor-mode 1)
            (electric-pair-local-mode 1)
            (racer-mode 1)))

(add-hook 'racer-mode-hook
          (lambda ()
            (company-mode 1)))
#+end_src

** Markdown

#+begin_src emacs-lisp
(use-package markdown-mode
  :defer t
  :config
  (setq markdown-open-command "~/bin/mark")
  (set-face-attribute 'markdown-table-face nil :inherit 'fixed-pitch)
  (add-hook 'markdown-mode-hook (lambda () (visual-line-mode 1))))
#+end_src

** Yaml

#+begin_src emacs-lisp
(use-package yaml-mode
  :defer t
  :config
  (add-hook 'yaml-mode-hook
            (lambda ()
              (variable-pitch-mode -1)
              (electric-indent-local-mode 1))))
#+end_src

** XML

#+begin_src emacs-lisp
;;(set-face-attribute 'nxml-element-local-name nil :inherit 'fixed-pitch)
#+end_src

** Bazel

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("BUILD\\'" . bazel-build-mode))
#+end_src

* Helm

#+begin_src emacs-lisp
(use-package helm
  :defer t
  :diminish
  :bind (("C-h" . nil)
         ("M-x" . helm-M-x)
         ("C-x b" . helm-buffers-list)
         ("C-x M-b" . helm-recentf)
         ("C-x r b" . helm-filtered-bookmarks)
         ("C-x C-f" . helm-find-files)
         ("C-x 4 f" . find-file-other-window)
         ("C-c C-w" . org-refile))
  :config (helm-mode 1))
#+end_src

#+begin_src emacs-lisp
(use-package helm-descbinds
  :defer t
  :after helm
  :config
  (helm-descbinds-mode 1))
#+end_src

Using Helm for projectile is great, but for some reason it barfs if I do not
bind "C-c" first.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c") (make-sparse-keymap))
(use-package helm-projectile
  :defer t
  :bind ("C-c p h" . helm-projectile))
#+end_src

* Key bindings

** General settings

On Mac, map the command key to meta and keep the normal behaviour of
option.

#+begin_src emacs-lisp
(setq mac-command-modifier 'meta
      mac-option-modifier nil)
#+end_src

This pops up a list of possible next keys in the minibuffer. It's incredibly
useful.

#+begin_src emacs-lisp
(use-package which-key
  :defer t
  :diminish
  :config
  (which-key-mode 1))
#+end_src

** New bindings

I picked up C-TAB switcing from Eclipse way back.  The reverse one is
perhaps overdoing it since I usually have no more than three buffers.

#+begin_src emacs-lisp
(global-set-key (kbd "C-<tab>")   'other-window)
(global-set-key (kbd "C-S-<tab>") 'bn/other-window-back)
#+end_src

Other window manipulation commands, ~C-c w~ prefix.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c w s") 'window-swap-states)
#+end_src

Text manipulation commants, ~C-c t~ prefix.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c t \\") 'align-regexp)
(global-set-key (kbd "C-c t <SPC>") 'just-one-space)
#+end_src

The ability  to move to the next/prev occurence of the current symbol
is something I missed after using IntelliJ for a while.

#+begin_src emacs-lisp
(use-package auto-highlight-symbol
  :defer t
  :diminish
  :bind (("M-p" . ahs-backward)
         ("M-n" . 'ahs-forward)))
#+end_src

Interactive regular expressions because I find it tricky to remember
the Emacs syntax for these.

#+begin_src emacs-lisp
(use-package visual-regexp
  :defer t
  :bind (("C-c C-r" . 'vr/replace)
         ("C-c q" . 'vr/query-replace)))
#+end_src

I tend to think snippets are kind of silly (why would you keep typing
the same thing?), but with Go it becomes useful...

#+begin_src emacs-lisp
(global-set-key (kbd "C-c y") 'helm-yas-complete)
#+end_src

** Rebindings

More powerful expansion.

#+begin_src emacs-lisp
(global-set-key (kbd "M-/") 'hippie-expand)
#+end_src

Rebind ~C-h~, and use it for deleting backwards. I still consider this a bit of
an experiment...

#+begin_src emacs-lisp
(global-set-key (kbd "C-?") 'help-command)
(global-set-key (kbd "C-h") 'delete-backward-char)
(global-set-key (kbd "M-h") 'backward-kill-word)
#+end_src



* Org mode

Load the org-mode and do basic configuration:

- Set up global keybindings.
- Clear some local keybindings that gets in the way.
- Also switch on auto-fill-mode in order to make prose easier to write.
- Ensure tables and blocks are still in monospace.
#+begin_src emacs-lisp
(use-package org
  :defer t
  :after diminish
  :ensure org-plus-contrib
  :bind (("C-c a" . org-agenda)
         ("C-c c" . org-capture)
         ("C-c l" . org-store-link)
         ("C-c C-x C-j" . org-clock-goto)
         ("C-. o j" . org-clock-goto)
         ("C-. o o" . org-clock-out)
         :map org-mode-map
         ("C-c t" . org-todo)
         ("C-c M-p" . org-move-subtree-up)
         ("C-c M-n" . org-move-subtree-down)
         ("C-<tab>" . nil)
         ("M-h" . nil))
  :init
  (setq org-edit-src-content-indentation 0
        org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-src-window-setup 'current-window
        org-clock-idle-time 10
        org-clock-in-switch-to-state "NEXT"
        org-clock-out-remove-zero-time-clocks t
        org-clock-out-when-done t
        org-pretty-entities t
        org-modules '(ol-w3m ol-bibtex ol-docview ol-info ol-mhe)
        org-use-sub-superscripts "{}")
  (add-hook 'org-mode-hook #'auto-fill-mode 1)
  (add-hook 'org-mode-hook #'org-indent-mode 1)
  (add-hook 'org-mode-hook #'electric-indent-local-mode -1)
  :config
  (set-face-attribute 'org-code nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  (diminish 'buffer-face-mode)
  (diminish 'org-indent-mode))
#+end_src

Set up fast selection for tags. Lots of them! Lowercase characters are for
categories, uppercase for contexts, including people. I could perhaps switch to
digits for contexts if clashes become a problem..

#+begin_src emacs-lisp
(setq org-tag-alist '(("admin" . ?a)
                      ("emacs" . ?e)
                      ("integrators" . ?i)
                      ("mdg" . ?m)
                      ("org" . ?o)
                      ("read" . ?r)
                      (:newline)
                      ("easy" . ?z)
                      ("hard" . ?h)
                      (:newline)
                      ("@home" . ?H)
                      ("@jessica" . ?J)
                      ("@planning" . ?P)
                      ("@standup" . ?S)
                      ("@tlf" . ?T)))
#+end_src

Properties that should be set across the board.

#+begin_src emacs-lisp
(setq org-global-properties
      '(("Effort_ALL" . "0:10 0:30 1:00 2:00 4:00 7:00")))
#+end_src

For the column view, I'd like to see the basics as compact as possible.

#+begin_src emacs-lisp
(setq org-columns-default-format
      "%40ITEM(Task) %9TODO(State) %6Effort(Effort){:} %6CLOCKSUM(Sum) %ALLTAGS(Tags)")
#+end_src

This allows me to quickly rifle through org files. The only issue I have with it
is that I want /more/, but it's rather slow on big directory trees.

#+begin_src emacs-lisp
(use-package helm-org-rifle
  :defer t
  :bind (("C-c r" . helm-org-rifle-agenda-files)
         ("C-c R" . helm-org-rifle-org-directory)))
#+end_src

** Some basic settings.

   I keep most of the stuff in my stuff repository. For now fleeting notes are
   recorded in an Inbox, which is a relic from an older GTD structure. Items are
   archived in datetrees per file to retain context..

#+begin_src emacs-lisp
(setq org-directory "~/Repository/Org"
      org-default-notes-file "~/Repository/Org/Inbox.org"
      org-archive-location "%s_archive::datetree/"
      org-stuck-projects '("/+PROJ" ("NEXT" "TODO") ("@buy") "")
      org-agenda-restore-windows-after-quit t
      org-agenda-window-setup 'current-window
      org-log-done 'time
      org-log-redeadline nil
      org-log-reschedule nil
      org-read-date-prefer-future 'time)
#+end_src

Basic GTD-like keywords. I like recording notes, so prompt for an explanation
when changing to WAITING or CANCELLED. This is also used for sort order.

#+begin_src emacs-lisp
(setq org-todo-keywords '((sequence "NEXT(n)" "TODO(t)" "PROJ(p)" "INACTIVE(i)"
                                    "SOMEDAY(s)" "WAITING(w@)"
                                    "|" "DONE(d)" "CANCELLED(c@)")))
#+end_src

Emacs Lisp is a popular source language, so give it  its own key. As both "e"
and "E" are taken, it will have to live under "m".

#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
             '("m" . "src emacs-lisp"))
#+end_src

Exporting to Slack allows me to edit the message in e.g. an org-mode note.

#+begin_src emacs-lisp
(use-package ox-slack
  :defer 10)
#+end_src

#+begin_src emacs-lisp
(use-package org-superstar
  :defer t
  :init
  (add-hook 'org-mode-hook 'org-superstar-mode))
#+end_src

** Extras

Support for pasting and dropping images. Setting ~org-image-actual-width~ to
~nil~ allows specifying e.g. ~#+org_attr: :width 600~ to limit the width of the
image, otherwise they sometimes appear very wide.

#+begin_src emacs-lisp
(use-package org-download
  :defer 5
  :init
  (setq org-image-actual-width nil
        org-download-image-dir "~/Repository/Org/Images"))
#+end_src

** Pomodoro

#+begin_src emacs-lisp
(use-package org-pomodoro
  :defer t
  :init (setq org-pomodoro-length 20))
#+end_src

** Contacts

It's easy to just stuff contacts into some random address book (GMail, your
phone, ...), but let's take a step back: Contacts are /people/ that you deal
with. Many of them you will deal with for years or decades. They should not just
be thrown into an address book as an afterthought.

#+begin_src emacs-lisp
(use-package org-contacts
  :ensure nil
  :after org
  :custom (org-contacts-files '("~/Repository/Org/People.org")))
#+end_src

** Bookmarks

#+begin_src emacs-lisp
(use-package org-cliplink
  :defer t
  :bind (:map org-mode-map
              ("C-c L" . org-cliplink)))
#+end_src

** Agenda setup

This is has been changing a lot, but the current idea is that I want to fetch
tasks from:

- Calendars, to show in the weekly agenda view.
- My projects repository, which is kind of legacy.
- Everything inside the interests and roles contexts.
   
#+begin_src emacs-lisp
(setq org-agenda-files
      (append`("~/Repository/Org"
               "~/.emacs.d/calendars")))
#+end_src

The agenda has views for the inbox, all my next actions, and all my projects.
But I'm planning to incorporate all of this information in one view, currently
dubbed "review".

#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      `(("i" "Inbox"
         ((todo "NEXT"
                ((org-agenda-files (list "~/Repository/Org/Inbox.org"))))))
        ("n" "Next actions" todo "NEXT")
        ("pa" "Projects" todo "PROJ")
        ("pw" "Projects/WG2" tags-todo "+TODO=\"PROJ\"+wg2")
         ("r" "Review"
         ((agenda)
          (todo "PROJ"
                ((org-agenda-overriding-header "Active projects:")))
          ,bn/org-agenda--active-projects))))
#+end_src

Start agenda on the current day rather than the first day of the week.

#+begin_src emacs-lisp
(setq org-agenda-start-on-weekday nil)
#+end_src

While org-ql is really powerful and pleasant to use, I'm not sure how it fits
into my workflow yet, except for one-off searches. Maybe I could/should use it
to build the nice and useful agenda view I've been dreaming off lately..?

#+begin_src emacs-lisp
(use-package org-ql
  :defer t
  :after helm-org)
#+end_src

** Capture and refile

Capture templates. NEXT is used for tasks I can start working on right away,
while TODO are effectively blocked. PROJ is for longer lived tasks with
sub-tasks. These are treated separately in weekly and daily reviews. MEETING is
used to record meetings, but I don't use it very often, so it's a candidate for
removal.

I use Diary to make a quick summary of the day, or when I have completed
significant tasks. Contacts is for recording new contacts, but it's mostly
experimental. Then there are templates for recurring meetings/standups that I
use for recording the outcome of these, and for tracking the time spent.

#+begin_src emacs-lisp
(setq org-capture-templates
      `(("n" "NEXT" entry (file org-default-notes-file)
         "* NEXT %i%?")
        ("t" "TODO" entry (file org-default-notes-file)
         "* TODO %i%?")
        ("p" "PROJ" entry (file org-default-notes-file)
         (file "~/.emacs.d/templates/project-capture.txt"))
        ("m" "Meeting" entry (file+datetree "~/Roles/TechLeadWG2/Meetings.org")
         "* NEXT %? :meeting:\n%U" :clock-in t :clock-resume t)
        ("d" "Diary" entry (file+datetree "~/Repository/Timeline/Diary.org")
         "* %?\n%U\n" :clock-in t :clock-resume t)
        ("c" "Contacts" entry (file ,(car (org-contacts-files)))
         (file "~/.emacs.d/templates/contacts-capture.txt"))
        ("s" "Standup" item
         (file+olp+datetree "~/Roles/TechLeadWG2/Recurring.org" "Standups")
         "%?\n" :clock-in t :clock-resume t)
        ("l" "Tech lead sync" item
         (file+olp+datetree "~/Roles/TechLeadWG2/Recurring.org" "Tech lead syncs")
         "%?\n" :clock-in t :clock-resume t)
        ("b" "Bookmark" entry (file "~/Bookmarks.org")
         "* %(org-cliplink-capture)\n%?" :empty-lines 1)))
#+end_src

I've dumbed down the refiling targets to just consider all the agenda files at
level one.

#+begin_src emacs-lisp
(setq org-refile-targets '((nil :maxlevel . 5)
                           (org-agenda-files :maxlevel . 2)))
#+end_src

** Roam

 Let's try to use the new Repository structure for org-roam. An alternative
 would have been to store it as a Context, but it's probably more of a cross
 context thing.

#+begin_src emacs-lisp
(setq org-roam-directory "~/Repository/Roam")
#+end_src

 Start org-roam and bind the most useful functions behind the ~C-c n~ prefix.

#+begin_src emacs-lisp
(use-package org-roam
  :defer t
  :diminish
  :ensure t
  :bind (("C-c n f" . org-roam-find-file)
         :map org-roam-mode-map
         (("C-c n l" . org-roam)
          ("C-c n g" . org-roam-graph)
          ("C-c n t a" . org-roam-tag-add)
          ("C-c n t d" . org-roam-tag-delete))
         :map org-mode-map
         (("C-c n i" . org-roam-insert)
          ("C-c n I" . org-roam-insert-immediate)))
  :hook (after-init . org-roam-mode)
  :init
  (make-directory org-roam-directory t)
  :config
  (setq org-roam-completion-system 'helm))
 #+end_src

 Also set up org-journal with org-roam for fleeting notes, i.e. notes
 that are not connected to a particular project.

#+begin_src emacs-lisp
(use-package org-journal
  :defer t
  :bind
  ("C-c n j" . org-journal-new-entry)
  :init
  (setq org-journal-file-type 'weekly
        org-journal-dir org-roam-directory
        org-journal-date-prefix "* "
        org-journal-file-header "#+title: %Y journal, week %V\n"
        org-journal-file-format "%Y-%V.org"
        org-journal-date-format "%A, %d %B %Y"
        org-journal-carryover-items ""))
 #+end_src
 
This is an attempt to set up org-roam-bibtex and friends in a way I understand.
The goal is to be able to insert cite-links using helm completion, both in
org-roam notes and elsewhere. The cited documents should be kept on disk
possibly managed by Zotero. The bibtex itself is less important.

Separates bibliograpgical notes from other notes, and provides
~orb-find-non-ref-file~ as an alternative to ~org-roam-find-file~ that ignores
bibliograpgical notes.

The setup was originally  based on Ian Jones' [[https://www.ianjones.us/org-roam-bibtex][Org Roam Bibtex]], and then
rewritten based on the guide  by [[https://rgoswami.me/posts/org-note-workflow/][rgoswami]]. It kinda works, but I still can't
make notes in epub documents.

This is the bibliography in BibTeX format, maintained using Zotero.

#+begin_src emacs-lisp
(setq zot-bib "~/Repository/Bibliography/Master.bib")
#+end_src

I use helm-bibtex to navigate the bibliograpgy in order to add citations, edit
notes and so on.

#+begin_src emacs-lisp
(use-package helm-bibtex
  :defer t
  :init
  (setq bibtex-completion-bibliography zot-bib
        bibtex-completion-library-path "~/Repository/Bibliography/bibtex-pdfs"
        bibtex-completion-notes-path org-roam-directory
        bibtex-completion-pdf-field "file"
        bibtex-completion-pdf-open-function
        (lambda (path)
          (start-process "open" "*open*" "open" path))))
#+end_src

Hmm.. I'm sure org-ref is super-important, but in my setup it's kind of hidden
behind helm-bibtex and org-roam-bibtex.

#+begin_src emacs-lisp
(use-package org-ref
  :defer t
  :init
  (setq org-ref-default-bibliography (list zot-bib)
        org-ref-pdf-directory "~/Repository/Bibliography/bibtex-pdfs/"
        org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
        org-ref-notes-directory org-roam-directory
        org-ref-notes-function 'orb-edit-notes))
#+end_src

This stitches together helm-bibtex, org-ref, and org-roam, enabling literature
notes in the org-roam directory.

#+begin_src emacs-lisp
(use-package org-roam-bibtex
  :defer t
  :diminish
  :after org-roam
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :init
  (setq orb-note-actions-frontend 'helm
        orb-preformat-keywords '("citekey" "date" "type" "pdf?" "note?" "author"
                                 "langid" "file" "author-or-editor-abbrev"
                                 "title" "shorttitle")
        orb-templates
        '(("r" "reference" plain (function org-roam-capture--get-point)
           (file "~/.emacs.d/templates/orb-note.txt")
           :file-name "${citekey}"
           :head "#+TITLE: ${shorttitle}\n"
           :unnarrowed t)))
  :bind (:map org-mode-map
         (("C-c n a" . orb-note-actions))))

(use-package org-noter
  :defer t
  :after (org pdf-view nov)
  :bind (:map org-noter-doc-mode-map
         (("M-i" . zp/org-noter-insert-precise-note-dwim)))
  :init
  (setq org-noter-always-create-frame nil
        org-noter-notes-search-path (list org-roam-directory)
        org-noter-notes-window-location 'horizontal-split
        org-noter-doc-split-percentage '(0.7 . 0.3)))

;; Move these to a separate "Media" section
(use-package pdf-tools
  :defer t
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :demand
  :config
  (pdf-tools-install :no-query))

(use-package org-pdftools
  :defer t
  :hook (org-load . org-pdftools-setup-link))

(use-package nov
  :defer t
  :mode ("\\.\\(epub\\|mobi\\)\\'" . nov-mode))

(use-package org-noter-pdftools
  :defer t
  :after org-noter
  :config
  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src

* Version control

Bind magit to ~C-x g~, and unbind ~C-<tab>~ since it's used for switching
buffers.

#+begin_src emacs-lisp
(use-package magit
  :defer t
  :bind (("C-x g" . magit)
         :map magit-mode-map
         ("C-<tab>" . nil))
  :init (setq magit-git-executable "/usr/local/bin/git"))
#+end_src

Forge hooks into magit and provides access to GitHub. It's quite slow on our
huge monorepo at work, but reducing the topic list limit seems to help.

#+begin_src emacs-lisp
(use-package forge
  :defer t
  :after magit
  :init
  (setq forge-topic-list-limit '(30 .  3)))
#+end_src

It is neat if not terribly useful to see the changes since last commit in the
buffer margin.

#+begin_src emacs-lisp
(use-package diff-hl
  :defer t
  :config
  (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
  (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
#+end_src

Finally, reduce the GC threshold a bit to make the user experience better.

#+begin_src emacs-lisp
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src
